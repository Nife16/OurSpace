package com.space.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.space.entity.User;
import com.space.repo.UserRepo;

// This annotates the Class to be a Service bean 
// SERVICES ARE FOR HOLDING YOUR BUSINESS LOGIC, NOT THE CONTROLLER
// THE PROCESS TO DO ANYTHING IN YOUR CODE SHOULD BE DONE HERE
// DONT HAVE BIG UGLY SPAGHETTI CODE CONTROLLERS, DATS BAD
@Service
public class UserService {
	
    // Brings in user Repo bean to the class
    @Autowired
    UserRepo userRepo;
	
    
    
	public List<User> getAll() {
	    // Repos come with predefined functions, like find all
		// It will bring back a list of all the objects from the table in the DB
	    return userRepo.findAll();
	}
	
	public User save(User user) {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved
	    return userRepo.save(user);
	}
    
    public User signIn(User user) {
        
        // Validate user with both email and password
    	// this is a function you must create in your repo
        return userRepo.signIn(user.getEmail(), user.getPassword());

       
    }
    
    public User getUserById(Integer userId) {
        
    	// Find by is another predefined repo function, you can always find by the primary key
    	// when you use findById, its good practice to use the isPresent in an if check first
    	// It will tell you if a object was actually found, with true or false values, true if found, false is not
    	// It will always return an Optional Object, the user will be there if found, null if not
    	// If found, give the object back with a .get() to grab it off the Optional object
    	
        if(userRepo.findById(userId).isPresent()) {
            return userRepo.findById(userId).get();
        }
        
        // if user is not present, throw error so front end can handle it
        throw new Error("User not found");
        
    }
    
    public User getUserByEmail(String email) {
        
    	// Another self made repo function, select * from user where email = ?1
        User foundUser = userRepo.getByEmail(email);
        
        if(foundUser == null) {
           throw new Error("User not found");
        }
        
        return foundUser;
        
    }
	

}
